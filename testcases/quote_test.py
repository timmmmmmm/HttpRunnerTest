# NOTE: Generated By HttpRunner v4.3.0
# FROM: testcases/quote.yml
from httprunner import HttpRunner, Config, Step, RunRequest


class TestCaseQuote(HttpRunner):

    config = (
        Config("Buy OTC quote using BTC to USD")
        .variables(
            **{
                "baseCurrency": "BTC",
                "orderCurrency": "USD",
                "buyAmount": 0.01,
                "buyPrice": "",
                "quoteId": "",
                "side": "BUY",
                "userTokenLogin": "USER_TOKEN_LOGIN_ad89165c8f9a3cf052d4dfb92836cf90_82a05397ce6340398f3eb308ffd3298f",
            }
        )
        .base_url("${ENV(base_url)}")
    )

    teststeps = [
        Step(
            RunRequest("get quote price")
            .with_variables(**{})
            .post("/api/otc/api/v1/quote")
            .with_headers(
                **{
                    "content-type": "application/json",
                    "lang": "en",
                    "token": "$userTokenLogin",
                    "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36",
                }
            )
            .with_json(
                {
                    "baseCurrency": "$baseCurrency",
                    "orderAmountInOrderCurrency": 0,
                    "orderCurrency": "$orderCurrency",
                    "orderSizeInBaseCurrency": "$buyAmount",
                    "side": "$side",
                }
            )
            .extract()
            .with_jmespath("body.quoteId", "quoteId")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.status", 30001)
            .assert_equal("body.quoteValidDurationMs", 6000)
            .assert_equal("body.quoteAmountToReceive", "$buyAmount")
            .assert_equal("body.quoteCurrencyToReceiveIn", "$baseCurrency")
            .assert_equal("body.quoteCurrencyToDeductIn", "$orderCurrency")
            .assert_equal("body.memo", None)
            .assert_equal("body.clOrderId", None)
            .assert_equal("body.side", "$side")
        ),
        Step(
            RunRequest("accept request")
            .with_variables(**{})
            .post("/api/otc/api/v1/accept/$quoteId")
            .with_headers(
                **{
                    "content-type": "application/json",
                    "lang": "en",
                    "token": "$userTokenLogin",
                    "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36",
                }
            )
            .extract()
            .with_jmespath("body.quotePriceInOrderCurrency", "buyPrice")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.status", 30007)
            .assert_equal("body.quoteId", "$quoteId")
            .assert_equal("body.quoteAmountToReceive", "$buyAmount")
            .assert_equal("body.quoteCurrencyToReceiveIn", "$baseCurrency")
            .assert_equal("body.quoteCurrencyToDeductIn", "$orderCurrency")
            .assert_equal("body.side", "$side")
        ),
        Step(
            RunRequest("query order from otc history")
            .with_variables(**{})
            .get(
                "/api/histories/spotTrades?orderType=OTC&orderMode=ALL_MODES&currency=USD&currentPage=1&pageSize=1"
            )
            .with_headers(
                **{
                    "content-type": "application/json",
                    "lang": "en",
                    "token": "$userTokenLogin",
                    "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.data.data[0].orderId", "$quoteId")
            .assert_equal("body.data.data[0].orderPrice", "$buyPrice")
            .assert_equal("body.data.data[0].orderSize", "$buyAmount")
            .assert_equal("body.data.data[0].priceCurrency", "$orderCurrency")
            .assert_equal("body.data.data[0].netCurrency", "$baseCurrency")
        ),
    ]


if __name__ == "__main__":
    TestCaseQuote().test_start()
